package exploit;

import org.json.JSONObject;
import org.omg.Messaging.SYNC_WITH_TRANSPORT;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class metasploitWay {
    public Map<Integer,String> protocol=new HashMap<Integer, String>();
    {
        this.protocol.put(47808,"BACnet");
        this.protocol.put(2455,"Codesys");
        this.protocol.put(789,"Crimson V3");
        this.protocol.put(2222,"Cspv4");
        this.protocol.put(20000,"Dnp3");
        this.protocol.put(44818,"Rockwell Automation/Allen-Bradley");
        this.protocol.put(1911,"Niagara Fox");
        this.protocol.put(18245,"General Electric");
        this.protocol.put(2404,"IEC 60870-5-4");
        this.protocol.put(5007,"MELSEC-Q");
        this.protocol.put(25565,"Minecraft");
        this.protocol.put(102,"Siemens S7");
        this.protocol.put(502,"Modbus");
        this.protocol.put(4800,"MOXA");
        this.protocol.put(9600,"Omron");
        this.protocol.put(1962,"Pcworx");
        this.protocol.put(20547,"Proconos");
    }
    public List<String> excuteExploit(String ip, String vendor){
        int port=-1;
        String Result="";
        List<String> res=new ArrayList<>();
        for (Map.Entry<Integer, String> entry  : protocol.entrySet()) {
            if(vendor.equals(entry.getValue())){
                port=entry.getKey();
            }
        }
        System.out.println(vendor);
        System.out.println(port);
        if(port>0){
//            String output_file="/home/iot/Project/Metasploit/Script/"+String.valueOf(port);
//            String scriptPath="/home/iot/Project/Metasploit/exploit/metasploit.py";
            String output_file="/ScanScript/MetasploitResult/"+port;
            String scriptPath="/ScanScript/metasploit.py";
            String passwordFile="/ScanScript/PassWord";
            try{
//                File dir=new File("/home/iot/Project/Metasploit/exploit");
                System.out.println(output_file);
                File dir=new File(output_file);
                if(!dir.exists())
                    dir.mkdirs();
                File[] files=dir.listFiles();
                for(File file:files){
                    file.delete();
                }
                String[] vendorE=vendor.split(" ");
                String transVendor=vendorE[0];
                if(vendorE.length>=2){
                    for(int i=1;i<vendorE.length;i++)
                        transVendor=transVendor+"_"+vendorE[i];
                }
                String tempcmd="python3 "+scriptPath+" "+transVendor+" "+ip+" "+output_file+" "+passwordFile;
                System.out.println(tempcmd);
                Process p=Runtime.getRuntime().exec(tempcmd);
                InputStream in = p.getInputStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String li = br.readLine();
                while(li!=null) {
                    System.out.println(li);
                    li = br.readLine();
                }
//                File dir2=new File("/home/iot/Project/Metasploit/exploit");
                File dir2=new File(output_file);
                for(File file:dir2.listFiles()){
                    InputStreamReader inputStreamReader=new InputStreamReader(new FileInputStream(file),"UTF-8");
                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                    String result="";
                    String line="";
                    while((line=bufferedReader.readLine())!=null){
                        result=result+line;
                    }
                    //logger.info(result);
                    System.out.println(result);
                    try{
                        JSONObject arr= (JSONObject) new JSONObject("{\"list\":"+result+"}").get("list");
                        String expoitResult=arr.getString("result");
                        String module=arr.getString("module");
                        Result="{\"result\":\""+expoitResult+"\","+"\"module\":\""+module+"\"}";
                        res.add(Result);
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                    //logger.info(expoitResult);
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
        return res;
    }
}
